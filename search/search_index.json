{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dirk Petersen's Development Configuration","text":"<p>Welcome to a comprehensive guide for setting up and working with a modern, security-focused development environment. This documentation covers everything from foundational shell configuration to cloud platform integration.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>New to this setup? Start here:</p> <ol> <li>Shell - Configure your Unix environment with SSH multiplexing and keychain</li> <li>GitHub - Set up Git authentication using GitHub CLI</li> <li>Claude Code - Configure AI-assisted development with AWS Bedrock</li> <li>Python - Set up Python development with UV or Pixi</li> </ol>"},{"location":"#complete-documentation","title":"Complete Documentation","text":""},{"location":"#foundation-tools","title":"Foundation &amp; Tools","text":"<ul> <li>Shell - SSH key management, keychain setup, SSH multiplexing, shell configuration</li> <li>WSL - Windows Subsystem for Linux setup and optimization</li> <li>GitHub - GitHub CLI, SSH authentication, basic Git workflows</li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>Claude Code - AI-powered development with Bedrock, model comparison (Haiku/Sonnet/Opus), git repository requirements</li> <li>Python - Indigo Python distribution, UV package manager, Pixi for conda compatibility</li> </ul>"},{"location":"#infrastructure","title":"Infrastructure","text":"<ul> <li>Nvidia - GPU acceleration, CUDA, and compute optimization</li> <li>Clouds - Multi-cloud setup for AWS, Azure, and Google Cloud</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#security-first-design","title":"Security-First Design","text":"<ul> <li>\ud83d\udd10 SSH keys with passphrase protection and keychain caching</li> <li>\ud83c\udfaf Service-specific AWS profiles with least-privilege IAM policies</li> <li>\u2705 GitHub CLI for streamlined authentication</li> <li>\ud83d\udd04 SSH multiplexing for efficient, reliable connections</li> </ul>"},{"location":"#developer-experience","title":"Developer Experience","text":"<ul> <li>\u26a1 Fast model switching for Claude Code (Haiku \u2192 Sonnet \u2192 Opus)</li> <li>\ud83d\udce6 Modern Python packaging with UV (fast) or Pixi (conda-compatible)</li> <li>\ud83c\udf10 Multi-cloud support with consistent credential patterns</li> <li>\ud83d\udee0\ufe0f Comprehensive shell aliases and environment optimization</li> </ul>"},{"location":"#best-practices","title":"Best Practices","text":"<ul> <li>Proper credential scope isolation</li> <li>Temporary credentials where possible</li> <li>Comprehensive audit logging</li> <li>Regular credential rotation</li> <li>Clear permission boundaries</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>Each section includes:</p> <ul> <li>Setup Instructions - Step-by-step configuration</li> <li>Configuration Files - Annotated examples and explanations</li> <li>Security Guidelines - Best practices for the platform</li> <li>Common Use Cases - Real-world examples</li> <li>Troubleshooting - Solutions to common issues</li> </ul>"},{"location":"#about-this-site","title":"About This Site","text":"<p>This documentation is designed for teams and individuals who want to:</p> <ul> <li>Understand and replicate this development environment</li> <li>Learn security best practices for cloud and local development</li> <li>Build reliable, consistent development workflows</li> <li>Work productively with AI-assisted tools like Claude Code</li> <li>Maintain clear separation of concerns across multiple services</li> </ul> <p>Whether you're setting up for the first time or optimizing an existing workflow, this guide provides practical, tested configurations and explanations.</p>"},{"location":"#getting-help","title":"Getting Help","text":"<p>For issues or questions:</p> <ul> <li>Check the specific section's troubleshooting or best practices</li> <li>Review configuration examples provided in each guide</li> <li>Ensure you're following the security-first approach outlined</li> <li>Verify file permissions match the documented settings</li> </ul>"},{"location":"claude-code/","title":"Claude Code","text":"<p>Documentation for Claude Code, an AI-powered development tool integrated into this workflow.</p>"},{"location":"claude-code/#overview","title":"Overview","text":"<p>Claude Code provides AI-assisted development capabilities for code generation, analysis, and problem-solving. This setup uses AWS Bedrock for model inference, enabling local-first Claude Code execution.</p>"},{"location":"claude-code/#setup","title":"Setup","text":""},{"location":"claude-code/#1-configure-aws-credentials","title":"1. Configure AWS Credentials","text":"<p>Add your AWS credentials to <code>~/.aws/credentials</code>:</p> <pre><code>[bedrock]\naws_access_key_id = XXXXXXXXXXX\naws_secret_access_key = YYYYYYYYYYYYYYYYY\n</code></pre>"},{"location":"claude-code/#2-configure-aws-region","title":"2. Configure AWS Region","text":"<p>Add the Bedrock profile to <code>~/.aws/config</code>:</p> <pre><code>[profile bedrock]\nregion = us-west-2\n</code></pre>"},{"location":"claude-code/#3-install-claude-code","title":"3. Install Claude Code","text":"<p>Install Claude Code globally via npm:</p> <pre><code>npm i -g @anthropic-ai/claude-code\n</code></pre>"},{"location":"claude-code/#4-create-wrapper-script","title":"4. Create Wrapper Script","text":"<p>Create a wrapper script at <code>~/bin/claude</code> to simplify usage and model selection:</p> <pre><code>#! /bin/bash\n\nexport CLAUDE_CODE_USE_BEDROCK=1\n\nexport AWS_REGION=us-west-2\nexport AWS_PROFILE=bedrock\nexport ANTHROPIC_MODEL=\"anthropic.claude-sonnet-4-5-20250929-v1:0\"\nexport ANTHROPIC_SMALL_FAST_MODEL=\"us.anthropic.claude-haiku-4-5-20251001-v1:0\"\n\nmymodel=${ANTHROPIC_SMALL_FAST_MODEL}\nif [[ \"$1\" == \"opus\" ]]; then\n  mymodel=$1\nelif [[ \"$1\" == \"sonnet\" ]]; then\n  mymodel=\"anthropic.claude-sonnet-4-5-20250929-v1:0\"\nfi\n\n~/.claude/local/claude --dangerously-skip-permissions --model $mymodel $@\n</code></pre>"},{"location":"claude-code/#5-launch-claude-code-to-set-up-path-and-permissions","title":"5. Launch Claude Code to Set Up PATH and Permissions","text":"<p>Instead of manually configuring PATH and permissions, let Claude Code do it for you:</p> <pre><code>mkdir -p ~/bin\nbash ~/bin/claude\n</code></pre> <p>When you launch this, Claude Code will:</p> <ol> <li>Ask you to configure your environment - Claude will detect that <code>~/bin/claude</code> needs to be made executable and added to PATH</li> <li>Provide setup commands - Follow Claude's suggestions to:</li> <li>Make <code>~/bin/claude</code> executable: <code>chmod +x ~/bin/claude</code></li> <li>Add <code>~/bin</code> to your PATH by updating <code>.bashrc</code> or <code>.zshrc</code></li> <li>Reload your shell - Execute the reload command Claude suggests</li> </ol>"},{"location":"claude-code/#6-test-claude-code","title":"6. Test Claude Code","text":"<p>Once Claude has helped you set up the environment, launch Claude Code normally:</p> <pre><code># Create a test directory\nmkdir -p ~/test-project\ncd ~/test-project\ngit init\n\n# Launch Claude Code with default Haiku model\nclaude .\n</code></pre> <p>When Claude Code launches for the first time, it will: 1. Ask for your SSH keychain passphrase (cached for 4 hours) 2. Initialize the Claude Code environment 3. Start the interactive session in the git repository</p>"},{"location":"claude-code/#important-git-repository-requirement","title":"Important: Git Repository Requirement","text":"<p>Claude Code must always be initialized inside a git repository. This is a requirement for the tool to function properly.</p>"},{"location":"claude-code/#setting-up-a-git-repository","title":"Setting Up a Git Repository","text":"<p>You have two options:</p>"},{"location":"claude-code/#option-1-create-a-local-repository","title":"Option 1: Create a Local Repository","text":"<pre><code>mkdir my-project\ncd my-project\ngit init\n</code></pre> <p>Then run Claude Code inside this directory:</p> <pre><code>claude .\n</code></pre>"},{"location":"claude-code/#option-2-create-a-repository-on-github","title":"Option 2: Create a Repository on GitHub","text":"<ol> <li>Visit github.com/new to create a new repository</li> <li>Clone it to your local machine:</li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/my-project.git\ncd my-project\n</code></pre> <ol> <li>Run Claude Code:</li> </ol> <pre><code>claude .\n</code></pre>"},{"location":"claude-code/#model-comparison","title":"Model Comparison","text":"<p>Understanding the differences between the three available models helps you choose the right tool for each task:</p> Aspect Haiku Sonnet Opus Speed \u26a1 Fast \u26a1\u26a1 Medium \ud83d\udc0c Slow Cost \ud83d\udcb0 $0.80/MTok \ud83d\udcb0\ud83d\udcb0 $3.00/MTok \ud83d\udcb0\ud83d\udcb0\ud83d\udcb0 $15.00/MTok Performance Excellent Very Good Superior Complex Tasks \u2b50 \u2b50\u2b50\u2b50 Medium \u2b50\u2b50\u2b50\u2b50\u2b50 High Coding Skills \u2b50\u2b50 Medium \u2b50\u2b50\u2b50 Good \u2b50\u2b50\u2b50\u2b50\u2b50 Excellent"},{"location":"claude-code/#usage","title":"Usage","text":""},{"location":"claude-code/#default-haiku-fast","title":"Default (Haiku - Fast)","text":"<p>Run Claude Code with the default fast Haiku model for quick fixes and simple tasks:</p> <pre><code>claude /path/to/project\n</code></pre> <p>Best for: - Quick bug fixes - Simple code generation - Refactoring small sections - Cost-conscious tasks</p>"},{"location":"claude-code/#sonnet-balanced","title":"Sonnet (Balanced)","text":"<p>Run with the balanced Sonnet model for most development work:</p> <pre><code>claude sonnet /path/to/project\n</code></pre> <p>Best for: - Complex feature development - Detailed code analysis - Medium-complexity problems - Good balance of speed and capability</p>"},{"location":"claude-code/#opus-most-capable","title":"Opus (Most Capable)","text":"<p>Run with the most capable Opus model for challenging problems:</p> <pre><code>claude opus /path/to/project\n</code></pre> <p>Best for: - Difficult architectural decisions - Complex problem-solving - Full-project analysis - Maximum capability required</p>"},{"location":"claude-code/#configuration-notes","title":"Configuration Notes","text":"<ul> <li>Bedrock Integration: Uses AWS Bedrock for model inference</li> <li>Context Window: Defaults to 1M context window for Sonnet</li> <li>No Confirmation: Configured to skip permission prompts for streamlined workflow</li> <li>Model Selection: Easy switching between Haiku (fast), Sonnet (balanced), and Opus (capable)</li> </ul>"},{"location":"claude-code/#tips-and-best-practices","title":"Tips and Best Practices","text":"<ul> <li>Use Haiku for quick fixes and simple tasks</li> <li>Use Sonnet for complex development and analysis</li> <li>Use Opus for challenging problems requiring maximum capability</li> <li>Ensure AWS credentials are properly configured before use</li> <li>The wrapper script automatically handles model selection and AWS environment setup</li> </ul>"},{"location":"clouds/","title":"Cloud Platforms","text":"<p>Guide to major cloud service providers and their configuration for development and deployment.</p>"},{"location":"clouds/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>AWS - Amazon Web Services</li> <li>Azure - Microsoft Azure</li> <li>Google Cloud - Google Cloud Platform</li> </ul>"},{"location":"clouds/#choosing-a-cloud-provider","title":"Choosing a Cloud Provider","text":"Feature AWS Azure GCP Services Broadest portfolio Enterprise integration Data/ML focused Global Reach \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 Pricing Competitive Enterprise discounts Compute competitive ML/AI SageMaker, Bedrock Cognitive Services Vertex AI Kubernetes EKS AKS GKE Best For General purpose Microsoft ecosystem Data science"},{"location":"clouds/#common-setup-patterns","title":"Common Setup Patterns","text":"<p>Each cloud provider section includes:</p> <ol> <li>CLI Installation - Command-line tools</li> <li>Authentication Setup - Credentials and configuration</li> <li>Service-Specific Profiles - Isolated, scoped access</li> <li>Best Practices - Security and cost optimization</li> <li>Common Use Cases - Getting started examples</li> </ol>"},{"location":"clouds/#security-principles","title":"Security Principles","text":"<p>Across all cloud providers:</p> <ul> <li>\u2705 Use service-specific profiles/roles</li> <li>\u2705 Apply least-privilege IAM policies</li> <li>\u2705 Rotate credentials regularly</li> <li>\u2705 Use temporary/session credentials when possible</li> <li>\u2705 Enable audit logging (CloudTrail, Activity Log, Cloud Audit Logs)</li> <li>\u274c Never use admin credentials for routine work</li> <li>\u274c Don't commit credentials to version control</li> </ul>"},{"location":"clouds/#next-steps","title":"Next Steps","text":"<ul> <li>Start with your primary cloud provider</li> <li>Configure authentication and credentials</li> <li>Create service-specific profiles for applications</li> <li>Review IAM policies for least privilege</li> <li>Enable cost monitoring and alerts</li> </ul>"},{"location":"clouds/aws/","title":"Amazon Web Services (AWS)","text":"<p>Cloud infrastructure and services configuration guide with security-first credential management.</p>"},{"location":"clouds/aws/#overview","title":"Overview","text":"<p>AWS provides scalable cloud computing services. This section covers secure setup, CLI configuration, and best practices for managing AWS credentials with proper scope isolation.</p>"},{"location":"clouds/aws/#installing-aws-cli-v2","title":"Installing AWS CLI v2","text":"<p>AWS CLI v2 is the recommended command-line interface for AWS services.</p>"},{"location":"clouds/aws/#linuxwsl-installation","title":"Linux/WSL Installation","text":"<p>One-liner to download, extract, install, and verify:</p> <pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\" &amp;&amp; unzip awscliv2.zip &amp;&amp; sudo ./aws/install &amp;&amp; aws --version &amp;&amp; rm -rf aws awscliv2.zip\n</code></pre>"},{"location":"clouds/aws/#macos-installation","title":"macOS Installation","text":"<p>Using Homebrew (Recommended):</p> <pre><code>brew install awscli &amp;&amp; aws --version\n</code></pre> <p>Or manually:</p> <p>One-liner to download, extract, install, and verify:</p> <pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-macos.zip\" -o \"awscliv2.zip\" &amp;&amp; unzip awscliv2.zip &amp;&amp; sudo ./aws/install &amp;&amp; aws --version &amp;&amp; rm -rf aws awscliv2.zip\n</code></pre>"},{"location":"clouds/aws/#aws-credential-setup","title":"AWS Credential Setup","text":""},{"location":"clouds/aws/#understanding-credential-files","title":"Understanding Credential Files","text":"<p>AWS uses two configuration files:</p> <ul> <li><code>~/.aws/credentials</code> - Contains access keys (API credentials)</li> <li><code>~/.aws/config</code> - Contains region and profile configuration</li> </ul>"},{"location":"clouds/aws/#creating-aws-credentials-via-cli","title":"Creating AWS Credentials via CLI","text":"<p>The easiest way to set up credentials is using the AWS CLI interactive configuration:</p> <pre><code>aws configure\n</code></pre> <p>This prompts for: 1. AWS Access Key ID 2. AWS Secret Access Key 3. Default region 4. Default output format</p> <p>However, this creates a default profile with broad permissions. For better security, follow the profile-based approach below.</p>"},{"location":"clouds/aws/#security-first-credential-management","title":"Security-First Credential Management","text":""},{"location":"clouds/aws/#critical-security-principle","title":"Critical Security Principle","text":"<p>Never use static credentials with broad AWS permissions as your default profile. Instead:</p> <ol> <li>Use temporary credentials or IAM roles when possible</li> <li>Keep static credentials in separate, narrowly-scoped profiles</li> <li>Grant only the minimum permissions needed for each profile</li> </ol>"},{"location":"clouds/aws/#setting-up-service-specific-profiles","title":"Setting Up Service-Specific Profiles","text":"<p>Create isolated credential profiles for each service. For example, to set up a Bedrock-only profile:</p> <pre><code>aws configure --profile bedrock\n</code></pre> <p>Enter your credentials when prompted. This creates:</p> <p>In <code>~/.aws/credentials</code>:</p> <pre><code>[bedrock]\naws_access_key_id = YOUR_ACCESS_KEY_ID\naws_secret_access_key = YOUR_SECRET_ACCESS_KEY\n</code></pre> <p>In <code>~/.aws/config</code>:</p> <pre><code>[profile bedrock]\nregion = us-west-2\noutput = json\n</code></pre>"},{"location":"clouds/aws/#complete-profile-configuration-example","title":"Complete Profile Configuration Example","text":"<p>For multiple services with proper isolation:</p> <p><code>~/.aws/credentials</code></p> <pre><code># Bedrock (Claude API access only)\n[bedrock]\naws_access_key_id = AKIA...\naws_secret_access_key = wJalrXUtnFEMI/K7MDENG...\n\n# S3 (Storage only)\n[s3-user]\naws_access_key_id = AKIA...\naws_secret_access_key = wJalrXUtnFEMI/K7MDENG...\n</code></pre> <p><code>~/.aws/config</code></p> <pre><code># Bedrock Profile - Bedrock service only\n[profile bedrock]\nregion = us-west-2\noutput = json\n\n# S3 Profile - S3 access only\n[profile s3-user]\nregion = us-west-2\noutput = json\n</code></pre>"},{"location":"clouds/aws/#iam-policy-examples","title":"IAM Policy Examples","text":"<p>When creating AWS access keys for a profile, apply strict IAM policies:</p> <p>Bedrock-Only Policy:</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"bedrock:InvokeModel\",\n        \"bedrock:InvokeModelWithResponseStream\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre> <p>S3-Only Policy:</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::my-bucket\",\n        \"arn:aws:s3:::my-bucket/*\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"clouds/aws/#using-profiles-with-aws-cli","title":"Using Profiles with AWS CLI","text":""},{"location":"clouds/aws/#override-default-profile","title":"Override Default Profile","text":"<p>Use any configured profile with the <code>--profile</code> flag:</p> <pre><code># Use bedrock profile\naws s3 ls --profile bedrock\n\n# Use s3-user profile\naws s3 ls --profile s3-user\n</code></pre>"},{"location":"clouds/aws/#set-default-profile-for-session","title":"Set Default Profile for Session","text":"<pre><code>export AWS_PROFILE=bedrock\naws s3 ls  # Uses bedrock profile\n</code></pre>"},{"location":"clouds/aws/#using-profiles-with-aws-sdks","title":"Using Profiles with AWS SDKs","text":"<p>Most AWS SDKs (Python boto3, Node.js, etc.) respect the <code>AWS_PROFILE</code> environment variable:</p> <pre><code>export AWS_PROFILE=bedrock\npython script.py  # Script uses bedrock credentials\n</code></pre>"},{"location":"clouds/aws/#credentials-file-security","title":"Credentials File Security","text":"<p>Ensure proper permissions on credential files:</p> <pre><code>chmod 700 ~/.aws\nchmod 600 ~/.aws/credentials\nchmod 600 ~/.aws/config\n</code></pre> <p>Never commit credential files to version control:</p> <pre><code># In .gitignore\n~/.aws/credentials\n~/.aws/config\n</code></pre>"},{"location":"clouds/aws/#best-practices","title":"Best Practices","text":""},{"location":"clouds/aws/#profile-isolation","title":"Profile Isolation","text":"<ul> <li>\u2705 DO: Create separate profiles for each service/application</li> <li>\u274c DON'T: Use default profile with full AWS permissions</li> </ul>"},{"location":"clouds/aws/#credential-rotation","title":"Credential Rotation","text":"<ul> <li>\u2705 DO: Rotate access keys regularly (quarterly minimum)</li> <li>\u274c DON'T: Reuse the same credentials across multiple systems</li> </ul>"},{"location":"clouds/aws/#least-privilege","title":"Least Privilege","text":"<ul> <li>\u2705 DO: Grant only the permissions each service needs</li> <li>\u274c DON'T: Attach broad policies like <code>AdministratorAccess</code></li> </ul>"},{"location":"clouds/aws/#monitoring","title":"Monitoring","text":"<ul> <li>\u2705 DO: Enable CloudTrail to audit credential usage</li> <li>\u2705 DO: Check CloudWatch for unusual activity</li> <li>\u274c DON'T: Ignore access logs</li> </ul>"},{"location":"clouds/aws/#temporary-credentials","title":"Temporary Credentials","text":"<ul> <li>\u2705 PREFER: Temporary credentials via STS AssumeRole (when possible)</li> <li>\u274c AVOID: Long-lived static credentials for high-privilege access</li> </ul>"},{"location":"clouds/azure/","title":"Microsoft Azure","text":"<p>Cloud infrastructure and services configuration guide for Azure.</p>"},{"location":"clouds/azure/#overview","title":"Overview","text":"<p>Microsoft Azure provides integrated cloud services with strong enterprise and Microsoft ecosystem integration. This section covers setup, CLI configuration, and best practices for Azure development.</p>"},{"location":"clouds/azure/#contents","title":"Contents","text":"<ul> <li>Azure CLI installation and setup</li> <li>Authentication and credential management</li> <li>Service-specific configurations</li> <li>IAM and security best practices</li> </ul> <p>Content coming soon...</p>"},{"location":"clouds/gcp/","title":"Google Cloud Platform (GCP)","text":"<p>Cloud infrastructure and services configuration guide for Google Cloud.</p>"},{"location":"clouds/gcp/#overview","title":"Overview","text":"<p>Google Cloud Platform excels in data analytics, machine learning, and Kubernetes. This section covers setup, CLI configuration, and best practices for GCP development.</p>"},{"location":"clouds/gcp/#contents","title":"Contents","text":"<ul> <li>Google Cloud CLI (gcloud) installation and setup</li> <li>Authentication and credential management</li> <li>Service accounts and IAM roles</li> <li>Vertex AI and data science tools</li> <li>Best practices for security and cost optimization</li> </ul> <p>Content coming soon...</p>"},{"location":"github/","title":"GitHub","text":"<p>Essential setup and configuration for working with GitHub repositories.</p>"},{"location":"github/#ssh-key-setup","title":"SSH Key Setup","text":"<p>SSH key generation and keychain management are covered in the Shell section. Follow that guide first to:</p> <ol> <li>Generate your SSH key with a passphrase</li> <li>Configure SSH permissions</li> <li>Set up SSH keychain to cache your passphrase</li> </ol> <p>After completing the Shell setup, come back here to push your key to GitHub.</p>"},{"location":"github/#add-ssh-key-to-github","title":"Add SSH Key to GitHub","text":""},{"location":"github/#option-1-quick-setup-with-github-cli-recommended","title":"Option 1: Quick Setup with GitHub CLI (Recommended)","text":"<p>The fastest way to add your SSH key to GitHub is using the GitHub CLI:</p> <ol> <li>Install GitHub CLI</li> </ol> <pre><code># On Ubuntu/WSL\nsudo apt-get update\nsudo apt-get install gh\n\n# On macOS\nbrew install gh\n\n# Or download from https://github.com/cli/cli/releases\n</code></pre> <ol> <li>Authenticate with GitHub</li> </ol> <pre><code>gh auth login\n</code></pre> <p>Follow the prompts: - Select \"GitHub.com\" - Select \"SSH\" for git protocol - Use your existing SSH key - Authorize GitHub CLI to manage SSH keys</p> <ol> <li>Automatic SSH key upload</li> </ol> <p>GitHub CLI will automatically detect your SSH key and upload it to your GitHub account during <code>gh auth login</code>.</p> <ol> <li>Verify setup</li> </ol> <pre><code>gh auth status\n</code></pre> <p>You should see confirmation of your authenticated account.</p>"},{"location":"github/#option-2-manual-github-web-interface","title":"Option 2: Manual GitHub Web Interface","text":"<p>If you prefer the web interface:</p> <ol> <li>Display your public key:</li> </ol> <pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> <ol> <li> <p>Copy the entire output</p> </li> <li> <p>Go to GitHub Settings \u2192 SSH and GPG keys \u2192 New SSH key</p> </li> <li> <p>Paste your public key and give it a descriptive title (e.g., \"My Laptop\")</p> </li> <li> <p>Click \"Add SSH key\"</p> </li> </ol>"},{"location":"github/#test-ssh-connection","title":"Test SSH Connection","text":"<p>Verify your SSH setup works with GitHub:</p> <pre><code>ssh -T git@github.com\n</code></pre> <p>You should see:</p> <pre><code>Hi YOUR_USERNAME! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre>"},{"location":"github/#basic-git-workflow","title":"Basic Git Workflow","text":""},{"location":"github/#clone-a-repository","title":"Clone a Repository","text":"<pre><code>git clone git@github.com:USERNAME/repository.git\ncd repository\n</code></pre>"},{"location":"github/#create-and-switch-branches","title":"Create and Switch Branches","text":"<pre><code>git checkout -b feature/my-feature\n</code></pre>"},{"location":"github/#make-changes-and-commit","title":"Make Changes and Commit","text":"<pre><code>git add .\ngit commit -m \"Describe your changes\"\n</code></pre>"},{"location":"github/#push-to-github","title":"Push to GitHub","text":"<pre><code>git push origin feature/my-feature\n</code></pre>"},{"location":"github/#create-a-pull-request","title":"Create a Pull Request","text":"<p>After pushing, visit your repository on GitHub and create a pull request to merge your branch.</p>"},{"location":"github/#cloning-your-first-repository","title":"Cloning Your First Repository","text":"<p>Your first GitHub repository can be cloned locally:</p> <pre><code>git clone git@github.com:YOUR_USERNAME/your-repo.git\ncd your-repo\n</code></pre> <p>Then you can run Claude Code inside:</p> <pre><code>claude .\n</code></pre>"},{"location":"nvidia/","title":"Nvidia","text":"<p>GPU acceleration and compute setup guide.</p>"},{"location":"nvidia/#overview","title":"Overview","text":"<p>Nvidia GPUs provide hardware acceleration for compute-intensive workloads. This section covers setup, driver configuration, and optimization.</p>"},{"location":"nvidia/#contents","title":"Contents","text":"<ul> <li>Nvidia driver installation</li> <li>CUDA toolkit setup</li> <li>GPU optimization and monitoring</li> </ul> <p>More content coming soon...</p>"},{"location":"python/","title":"Python","text":"<p>Python development setup and package management using modern tools.</p>"},{"location":"python/#overview","title":"Overview","text":"<p>This setup uses two modern package managers: - UV: Fast, reliable Python package manager and project tool - Pixi: Cross-platform package manager compatible with conda</p>"},{"location":"python/#installing-indigo-python-binary-distribution","title":"Installing Indigo (Python Binary Distribution)","text":"<p>For a clean, optimized Python environment, use Indigo - a standalone Python distribution.</p>"},{"location":"python/#download-and-install","title":"Download and Install","text":"<ol> <li>Download the latest Indigo release</li> </ol> <pre><code>curl -L https://github.com/indygreg/python-build-standalone/releases/download/20240713/cpython-3.13.0b4+20240713-x86_64-unknown-linux-gnu.tar.zst -o python.tar.zst\n</code></pre> <ol> <li>Extract to your home directory</li> </ol> <pre><code>mkdir -p ~/.python\ntar -I zstd -xf python.tar.zst -C ~/.python\n</code></pre> <ol> <li>Add to PATH</li> </ol> <p>Add this to your shell configuration (<code>.bashrc</code>, <code>.zshrc</code>):</p> <pre><code>export PATH=\"$HOME/.python/python/install/bin:$PATH\"\n</code></pre> <ol> <li>Verify Installation</li> </ol> <pre><code>python --version\n</code></pre>"},{"location":"python/#uv-package-manager","title":"UV Package Manager","text":"<p>UV is a fast, reliable package manager for Python projects.</p>"},{"location":"python/#installation","title":"Installation","text":"<pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"python/#creating-a-new-project","title":"Creating a New Project","text":"<pre><code>uv init my-project\ncd my-project\n</code></pre>"},{"location":"python/#adding-dependencies","title":"Adding Dependencies","text":"<pre><code>uv add requests\nuv add --dev pytest\n</code></pre>"},{"location":"python/#running-python-scripts","title":"Running Python Scripts","text":"<pre><code>uv run script.py\n</code></pre>"},{"location":"python/#installing-from-pyprojecttoml","title":"Installing from pyproject.toml","text":"<pre><code>uv sync\n</code></pre>"},{"location":"python/#creating-a-virtual-environment","title":"Creating a Virtual Environment","text":"<pre><code>uv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre>"},{"location":"python/#pixi-package-manager","title":"Pixi Package Manager","text":"<p>Pixi is a cross-platform package manager compatible with conda environments, great for data science and scientific computing.</p>"},{"location":"python/#installation_1","title":"Installation","text":"<pre><code>curl -fsSL https://pixi.sh/install.sh | bash\n</code></pre>"},{"location":"python/#creating-a-new-project_1","title":"Creating a New Project","text":"<pre><code>pixi init my-data-project\ncd my-data-project\n</code></pre>"},{"location":"python/#adding-dependencies_1","title":"Adding Dependencies","text":"<pre><code>pixi add numpy pandas\npixi add --pypi requests\n</code></pre>"},{"location":"python/#running-commands","title":"Running Commands","text":"<pre><code>pixi run python script.py\n</code></pre>"},{"location":"python/#creating-environments","title":"Creating Environments","text":"<pre><code>pixi create -e analysis\npixi run -e analysis python analysis.py\n</code></pre>"},{"location":"python/#conda-compatibility","title":"Conda Compatibility","text":"<p>Pixi automatically handles conda channels and environments:</p> <pre><code>pixi add -c conda-forge numpy\n</code></pre>"},{"location":"python/#choosing-between-uv-and-pixi","title":"Choosing Between UV and Pixi","text":"Use Case Tool Standard Python projects UV Data science / Jupyter Pixi Machine learning Pixi Web development UV CLI tools UV Scientific computing Pixi Mixed dependencies (PyPI + conda) Pixi"},{"location":"python/#virtual-environments","title":"Virtual Environments","text":""},{"location":"python/#with-uv","title":"With UV","text":"<pre><code># Create virtual environment\nuv venv\n\n# Activate\nsource .venv/bin/activate\n\n# Deactivate\ndeactivate\n</code></pre>"},{"location":"python/#with-pixi","title":"With Pixi","text":"<pre><code># Create environment\npixi create -e myenv\n\n# Use environment\npixi run -e myenv python script.py\n</code></pre>"},{"location":"python/#best-practices","title":"Best Practices","text":"<ul> <li>Always use virtual environments to isolate project dependencies</li> <li>Use UV for most Python projects - it's faster and simpler</li> <li>Use Pixi for data science - better conda ecosystem support</li> <li>Commit lock files (<code>uv.lock</code> or <code>pixi.lock</code>) to version control</li> <li>Document dependencies in <code>pyproject.toml</code> or <code>pixi.toml</code></li> </ul>"},{"location":"shell/","title":"Shell","text":"<p>Unix shell configuration, SSH setup, and Git workflows for a productive development environment.</p>"},{"location":"shell/#overview","title":"Overview","text":"<p>The Shell section is organized into three key areas:</p> <ol> <li>Basic - Shell profiles, environment variables, aliases, and history management</li> <li>SSH - SSH keys, keychain integration, connection multiplexing, and security best practices</li> <li>Git - Git configuration, aliases, workflows, and commit best practices</li> </ol>"},{"location":"shell/#quick-start","title":"Quick Start","text":""},{"location":"shell/#set-up-your-environment","title":"Set Up Your Environment","text":"<p>Start with Basic to configure your shell profile with essential environment variables and aliases.</p>"},{"location":"shell/#configure-ssh","title":"Configure SSH","text":"<p>Next, follow SSH to generate SSH keys with passphrases and set up keychain for secure, convenient authentication.</p>"},{"location":"shell/#configure-git","title":"Configure Git","text":"<p>Finally, set up Git with global configuration, aliases, and workflows for efficient version control.</p>"},{"location":"shell/#key-components","title":"Key Components","text":""},{"location":"shell/#basic-shell","title":"Basic Shell","text":"<ul> <li>Shell profile configuration (Bash/Zsh)</li> <li>Environment variables</li> <li>Useful aliases</li> <li>Command history management</li> </ul>"},{"location":"shell/#ssh-configuration","title":"SSH Configuration","text":"<ul> <li>Ed25519 key generation with passphrases</li> <li>SSH key permissions and security</li> <li>SSH multiplexing for faster connections</li> <li>SSH keychain for passphrase caching</li> <li>Jump host proxy configuration</li> <li>Connection optimization</li> </ul>"},{"location":"shell/#git-workflows","title":"Git Workflows","text":"<ul> <li>Git configuration and aliases</li> <li>Commit message best practices</li> <li>Branch naming conventions</li> <li>Common Git workflows</li> <li>Helpful Git commands</li> <li>SSH integration with Git</li> </ul>"},{"location":"shell/#security-first-approach","title":"Security-First Approach","text":"<p>This setup emphasizes:</p> <ul> <li>\ud83d\udd10 SSH keys with passphrases - Protecting your keys even if compromised</li> <li>\ud83d\udd04 Keychain caching - Convenience without sacrificing security</li> <li>\ud83d\ude80 Connection multiplexing - Faster, more reliable remote access</li> <li>\ud83d\udcdd Clear Git workflows - Organized, traceable development history</li> <li>\ud83d\udee1\ufe0f Best practices - Industry standards for secure shell usage</li> </ul>"},{"location":"shell/#topics-by-use-case","title":"Topics by Use Case","text":""},{"location":"shell/#remote-server-access","title":"Remote Server Access","text":"<ol> <li>Generate SSH keys (SSH)</li> <li>Configure SSH multiplexing (SSH)</li> <li>Set up jump hosts for secure access (SSH)</li> </ol>"},{"location":"shell/#git-development","title":"Git Development","text":"<ol> <li>Configure Git globally (Git)</li> <li>Add Git aliases for productivity (Git)</li> <li>Follow branch naming conventions (Git)</li> </ol>"},{"location":"shell/#shell-productivity","title":"Shell Productivity","text":"<ol> <li>Set up shell profile (Basic)</li> <li>Add useful aliases (Basic)</li> <li>Configure environment variables (Basic)</li> </ol>"},{"location":"shell/basic/","title":"Shell - Basic Setup","text":"<p>Essential shell configuration for a productive Unix environment.</p>"},{"location":"shell/basic/#shell-profile-setup","title":"Shell Profile Setup","text":""},{"location":"shell/basic/#bash-configuration","title":"Bash Configuration","text":"<p>Edit <code>~/.bashrc</code>:</p> <pre><code># Add SSH Keychain\neval $(ssh-keychain -q -t 4h ~/.ssh/id_ed25519)\n\n# Add useful aliases\nalias ll='ls -lah'\nalias cd..='cd ..'\nalias clear-cache='rm -rf ~/.cache'\n\n# Set default editor\nexport EDITOR=vim\n\n# Add local bin to PATH\nexport PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre>"},{"location":"shell/basic/#zsh-configuration","title":"Zsh Configuration","text":"<p>Edit <code>~/.zshrc</code>:</p> <pre><code># Add SSH Keychain\neval $(ssh-keychain -q -t 4h ~/.ssh/id_ed25519)\n\n# Add useful aliases\nalias ll='ls -lah'\nalias cd..='cd ..'\n\n# Set default editor\nexport EDITOR=vim\n\n# Add local bin to PATH\nexport PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre>"},{"location":"shell/basic/#essential-environment-variables","title":"Essential Environment Variables","text":"<p>Set these in your shell configuration:</p> <pre><code># Editor\nexport EDITOR=vim\n\n# Language\nexport LANG=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\n\n# Path additions\nexport PATH=\"$HOME/.local/bin:$HOME/.cargo/bin:$PATH\"\n\n# Git\nexport GIT_EDITOR=vim\n</code></pre>"},{"location":"shell/basic/#useful-shell-aliases","title":"Useful Shell Aliases","text":"<p>Add to your shell configuration:</p> <pre><code># Navigation\nalias ..='cd ..'\nalias ...='cd ../..'\nalias ll='ls -lah'\nalias l='ls -la'\n\n# Development\nalias cls='clear'\nalias py='python'\nalias serve='python -m http.server'\n</code></pre>"},{"location":"shell/basic/#command-history","title":"Command History","text":"<p>Keep your shell history clean:</p> <pre><code># Increase history size\nexport HISTSIZE=10000\nexport HISTFILESIZE=10000\n\n# Ignore duplicate commands\nexport HISTCONTROL=ignoredups\n\n# Ignore common commands from history\nexport HISTIGNORE=\"ls:cd:pwd:history\"\n</code></pre>"},{"location":"shell/basic/#secure-development-environment","title":"Secure Development Environment","text":"<p>Your shell environment should be:</p> <ul> <li>Secure: SSH keys protected with passphrases, keychain for convenience</li> <li>Clean: Well-organized bin directories, clear PATH</li> <li>Productive: Useful aliases, proper history management</li> <li>Isolated: Virtual environments for projects, clear separation of concerns</li> </ul>"},{"location":"shell/git/","title":"Shell - Git Configuration","text":"<p>Git setup, configuration, and shell aliases for efficient version control workflows.</p>"},{"location":"shell/git/#git-aliases","title":"Git Aliases","text":"<p>Add these convenient aliases to your shell configuration:</p> <pre><code># Git\nalias g='git'\nalias gs='git status'\nalias ga='git add'\nalias gc='git commit'\nalias gp='git push'\nalias gl='git log'\n</code></pre>"},{"location":"shell/git/#git-configuration","title":"Git Configuration","text":"<p>Set up your global Git configuration:</p> <pre><code># Set your name and email\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n\n# Set default editor\ngit config --global core.editor vim\n\n# Set default branch name for new repos\ngit config --global init.defaultBranch main\n\n# Configure line endings\ngit config --global core.autocrlf input  # On macOS/Linux\n# git config --global core.autocrlf true  # On Windows\n</code></pre>"},{"location":"shell/git/#global-git-configuration-file","title":"Global Git Configuration File","text":"<p>View your complete Git configuration at <code>~/.gitconfig</code>:</p> <pre><code>[user]\n    name = Your Name\n    email = your.email@example.com\n\n[core]\n    editor = vim\n    autocrlf = input\n\n[init]\n    defaultBranch = main\n\n[push]\n    default = current\n\n[pull]\n    rebase = true\n\n[alias]\n    st = status\n    co = checkout\n    br = branch\n    ci = commit\n    unstage = restore --staged\n    discard = restore\n    last = log -1 HEAD\n</code></pre>"},{"location":"shell/git/#common-git-workflows","title":"Common Git Workflows","text":""},{"location":"shell/git/#initialize-a-repository","title":"Initialize a Repository","text":"<pre><code>mkdir my-project\ncd my-project\ngit init\n</code></pre>"},{"location":"shell/git/#clone-a-repository","title":"Clone a Repository","text":"<pre><code>git clone git@github.com:USERNAME/repository.git\ncd repository\n</code></pre>"},{"location":"shell/git/#create-and-switch-branches","title":"Create and Switch Branches","text":"<pre><code>git checkout -b feature/my-feature\n</code></pre>"},{"location":"shell/git/#stage-and-commit-changes","title":"Stage and Commit Changes","text":"<pre><code># Stage specific files\ngit add path/to/file\n\n# Stage all changes\ngit add .\n\n# Commit with message\ngit commit -m \"Describe your changes\"\n</code></pre>"},{"location":"shell/git/#push-to-remote","title":"Push to Remote","text":"<pre><code># Push current branch\ngit push origin feature/my-feature\n\n# Push all branches\ngit push --all\n\n# Force push (use with caution!)\ngit push --force-with-lease\n</code></pre>"},{"location":"shell/git/#pull-changes","title":"Pull Changes","text":"<pre><code># Pull with rebase (recommended)\ngit pull --rebase\n\n# Pull normally\ngit pull\n</code></pre>"},{"location":"shell/git/#view-history","title":"View History","text":"<pre><code># View commit log\ngit log\n\n# View log with graph\ngit log --oneline --graph --all\n\n# View commits by author\ngit log --author=\"Name\"\n</code></pre>"},{"location":"shell/git/#git-best-practices","title":"Git Best Practices","text":""},{"location":"shell/git/#commit-messages","title":"Commit Messages","text":"<p>Write clear, descriptive commit messages:</p> <pre><code># Good\ngit commit -m \"Fix authentication bug in login flow\"\n\n# Bad\ngit commit -m \"Fix bug\"\n</code></pre> <p>Follow the format: - First line: Short summary (50 chars max) - Blank line - Body: Explain what and why (wrap at 72 chars)</p>"},{"location":"shell/git/#branch-naming","title":"Branch Naming","text":"<p>Use descriptive branch names:</p> <pre><code># Features\ngit checkout -b feature/user-authentication\n\n# Bug fixes\ngit checkout -b bugfix/login-redirect\n\n# Improvements\ngit checkout -b improvement/performance-optimization\n\n# Release\ngit checkout -b release/v1.2.0\n</code></pre>"},{"location":"shell/git/#keeping-history-clean","title":"Keeping History Clean","text":"<pre><code># Rebase before pushing to clean up commits\ngit rebase -i origin/main\n\n# Squash commits\ngit rebase -i HEAD~3  # Interactive rebase last 3 commits\n\n# Amend last commit\ngit commit --amend --no-edit\n</code></pre>"},{"location":"shell/git/#git-environment-variables","title":"Git Environment Variables","text":"<p>Set these in your shell configuration:</p> <pre><code># Git editor\nexport GIT_EDITOR=vim\n\n# Avoid being asked for credentials repeatedly\nexport GIT_ASKPASS=/usr/bin/git-credential-osxkeychain  # macOS\n</code></pre>"},{"location":"shell/git/#helpful-git-commands","title":"Helpful Git Commands","text":"<pre><code># Check status\ngit status\n\n# Show unstaged changes\ngit diff\n\n# Show staged changes\ngit diff --cached\n\n# Show changes in specific file\ngit diff path/to/file\n\n# Stash changes temporarily\ngit stash\n\n# Apply stashed changes\ngit stash pop\n\n# Undo last commit (keep changes)\ngit reset --soft HEAD~1\n\n# Discard last commit completely\ngit reset --hard HEAD~1\n\n# View who changed each line\ngit blame path/to/file\n\n# Search commit history\ngit log -S \"search term\"\n</code></pre>"},{"location":"shell/git/#ssh-integration-with-git","title":"SSH Integration with Git","text":"<p>Ensure your SSH key is configured for Git authentication:</p> <pre><code># Test SSH connection to GitHub\nssh -T git@github.com\n\n# Should output: Hi USERNAME! You've successfully authenticated...\n</code></pre> <p>Your SSH configuration from the SSH section enables secure Git operations without storing credentials.</p>"},{"location":"shell/ssh/","title":"Shell - SSH Configuration","text":"<p>SSH key management, keychain setup, and connection optimization.</p>"},{"location":"shell/ssh/#ssh-key-management","title":"SSH Key Management","text":"<p>Secure shell access is critical for development work. This section covers SSH setup with password-protected keys and keychain integration.</p>"},{"location":"shell/ssh/#generating-ssh-keys","title":"Generating SSH Keys","text":"<p>SSH keys should always use a passphrase for security. When generating keys, use a strong password:</p> <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\" -f ~/.ssh/id_ed25519\n</code></pre> <p>Important: When prompted for a passphrase, enter a strong password. This protects your key if it's ever compromised.</p>"},{"location":"shell/ssh/#ssh-key-permissions","title":"SSH Key Permissions","text":"<p>Ensure proper permissions on your SSH keys:</p> <pre><code>chmod 700 ~/.ssh\nchmod 600 ~/.ssh/id_ed25519\nchmod 644 ~/.ssh/id_ed25519.pub\n</code></pre>"},{"location":"shell/ssh/#ssh-configuration","title":"SSH Configuration","text":"<p>Create or edit <code>~/.ssh/config</code> to simplify SSH connections and optimize performance:</p> <pre><code># SSH Connection Multiplexing and Global Defaults\nHost *\n    ControlPath ~/.ssh/controlmasters/%r@%h:%p\n    ControlMaster auto\n    ControlPersist 10m\n    ServerAliveInterval 10\n    ServerAliveCountMax 3\n    User your-username\n\n# GitHub\nHost github.com\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_ed25519\n    AddKeysToAgent yes\n\n# Jump Host Example\nHost jumphost\n    HostName jump.example.com\n    ControlMaster auto\n    DynamicForward 1080\n\n# Remote Server Behind Jump Host\nHost remote-server\n    HostName server.example.com\n    ProxyJump jumphost\n</code></pre> <p>Key Configuration Options:</p> <ul> <li><code>ControlPath</code>: Directory for multiplexed connections (creates <code>.ssh/controlmasters/</code> dir)</li> <li><code>ControlMaster auto</code>: Automatically reuse connections</li> <li><code>ControlPersist 10m</code>: Keep connections alive for 10 minutes</li> <li><code>ServerAliveInterval 10</code>: Send keepalive every 10 seconds</li> <li><code>ServerAliveCountMax 3</code>: Disconnect after 3 missed keepalives</li> <li><code>ProxyJump</code>: Chain connections through jump host</li> <li><code>DynamicForward</code>: Enable SOCKS proxy through host</li> </ul> <p>Setup multiplexing directory:</p> <pre><code>mkdir -p ~/.ssh/controlmasters\nchmod 700 ~/.ssh/controlmasters\n</code></pre> <p>Benefits:</p> <ul> <li>Faster connections: Reuses SSH connections, eliminates repeated authentication</li> <li>Reliable: Keepalive prevents timeouts on idle connections</li> <li>Secure: Jump host proxy keeps direct connections private</li> <li>Flexible: Works with any remote host configuration</li> </ul>"},{"location":"shell/ssh/#ssh-keychain","title":"SSH Keychain","text":"<p>Use SSH keychain to securely store your SSH key passphrase in memory, eliminating the need to re-enter it for every SSH command.</p>"},{"location":"shell/ssh/#installation","title":"Installation","text":"<p>On Ubuntu/WSL:</p> <pre><code>sudo apt-get update\nsudo apt-get install ssh-askpass ssh-keychain\n</code></pre> <p>On macOS:</p> <pre><code># Usually included by default\n# If not: brew install ssh-askpass\n</code></pre>"},{"location":"shell/ssh/#configuration","title":"Configuration","text":"<p>Add to your shell configuration file (<code>.bashrc</code>, <code>.zshrc</code>, or <code>.profile</code>):</p> <pre><code># SSH Keychain - loads SSH key passphrase into memory\neval $(ssh-keychain -q -t 4h ~/.ssh/id_ed25519)\n</code></pre> <p>The <code>-t 4h</code> parameter sets the cache timeout to 4 hours. Adjust as needed.</p>"},{"location":"shell/ssh/#how-it-works","title":"How It Works","text":"<ol> <li>On your first SSH/Git command of the session, you'll be prompted for your SSH key passphrase</li> <li>Enter your password - it's stored securely in your system keychain</li> <li>For the next 4 hours, all SSH connections use the cached passphrase</li> <li>After the timeout, you'll be prompted again</li> </ol> <p>This approach provides security (your key is protected with a password) and convenience (you only type it once per session).</p>"},{"location":"shell/ssh/#troubleshooting","title":"Troubleshooting","text":"<p>If prompted repeatedly for your passphrase:</p> <pre><code># Check if ssh-agent is running\nps aux | grep ssh-agent\n\n# Manually start ssh-agent\neval $(ssh-agent -s)\n\n# Add key manually\nssh-add ~/.ssh/id_ed25519\n</code></pre>"},{"location":"shell/ssh/#ssh-security-best-practices","title":"SSH Security Best Practices","text":""},{"location":"shell/ssh/#keep-ssh-keys-secure","title":"Keep SSH Keys Secure","text":"<ul> <li>Never commit SSH keys to version control</li> <li>Never share your private key</li> <li>Always use strong passphrases</li> <li>Rotate keys periodically</li> <li>Use key files only for automated systems</li> </ul>"},{"location":"shell/ssh/#ssh-agent-security","title":"SSH Agent Security","text":"<ul> <li>Let keychain manage your passphrase</li> <li>Don't store unencrypted passphrases</li> <li>Lock your computer when stepping away</li> <li>Expire cached passphrases after reasonable time</li> </ul>"},{"location":"shell/ssh/#ssh-connection-best-practices","title":"SSH Connection Best Practices","text":"<ul> <li>Use SSH keys instead of passwords</li> <li>Keep SSH config clean and organized</li> <li>Test connections with <code>ssh -v</code> for debugging</li> <li>Monitor SSH access logs regularly</li> <li>Disable root login on remote servers</li> </ul>"},{"location":"wsl/","title":"Windows Subsystem for Linux (WSL)","text":"<p>Setup and configuration guide for Windows Subsystem for Linux.</p>"},{"location":"wsl/#overview","title":"Overview","text":"<p>WSL enables running a Linux environment directly on Windows, providing a native Linux development experience without dual-boot or virtualization overhead.</p>"},{"location":"wsl/#contents","title":"Contents","text":"<ul> <li>WSL installation and setup</li> <li>Distribution configuration</li> <li>Development environment configuration</li> </ul> <p>More content coming soon...</p>"}]}