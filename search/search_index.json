{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to Dirk Petersen's documentation site. This is a comprehensive guide to the tools, platforms, and configurations used in this workflow.</p>"},{"location":"#topics","title":"Topics","text":"<ul> <li>Claude Code - AI-powered development workflow and integration</li> <li>WSL - Windows Subsystem for Linux setup and configuration</li> <li>AWS - Cloud infrastructure and services</li> <li>Nvidia - GPU acceleration and compute setup</li> </ul>"},{"location":"#about","title":"About","text":"<p>This documentation is designed for anyone wanting to understand, replicate, or work with Dirk Petersen's development environment and configurations. Each section provides practical guides and best practices for working with these technologies.</p>"},{"location":"aws/","title":"Amazon Web Services (AWS)","text":"<p>Cloud infrastructure and services configuration guide.</p>"},{"location":"aws/#overview","title":"Overview","text":"<p>AWS provides scalable cloud computing services. This section covers the services, configurations, and best practices used in this workflow.</p>"},{"location":"aws/#contents","title":"Contents","text":"<ul> <li>AWS account setup and configuration</li> <li>Core services overview</li> <li>Infrastructure as Code</li> </ul> <p>More content coming soon...</p>"},{"location":"claude-code/","title":"Claude Code","text":"<p>Documentation for Claude Code, an AI-powered development tool integrated into this workflow.</p>"},{"location":"claude-code/#overview","title":"Overview","text":"<p>Claude Code provides AI-assisted development capabilities for code generation, analysis, and problem-solving. This setup uses AWS Bedrock for model inference, enabling local-first Claude Code execution.</p>"},{"location":"claude-code/#setup","title":"Setup","text":""},{"location":"claude-code/#1-configure-aws-credentials","title":"1. Configure AWS Credentials","text":"<p>Add your AWS credentials to <code>~/.aws/credentials</code>:</p> <pre><code>[bedrock]\naws_access_key_id = XXXXXXXXXXX\naws_secret_access_key = YYYYYYYYYYYYYYYYY\n</code></pre>"},{"location":"claude-code/#2-configure-aws-region","title":"2. Configure AWS Region","text":"<p>Add the Bedrock profile to <code>~/.aws/config</code>:</p> <pre><code>[profile bedrock]\nregion = us-west-2\n</code></pre>"},{"location":"claude-code/#3-install-claude-code","title":"3. Install Claude Code","text":"<p>Install Claude Code globally via npm:</p> <pre><code>npm i -g @anthropic-ai/claude-code\n</code></pre>"},{"location":"claude-code/#4-create-wrapper-script","title":"4. Create Wrapper Script","text":"<p>Create a wrapper script at <code>~/bin/claude</code> to simplify usage:</p> <pre><code>#! /bin/bash\n\nexport CLAUDE_CODE_USE_BEDROCK=1\n\nexport AWS_REGION=us-west-2\nexport AWS_PROFILE=bedrock\nexport ANTHROPIC_MODEL=\"anthropic.claude-sonnet-4-5-20250929-v1:0\"\nexport ANTHROPIC_SMALL_FAST_MODEL=\"us.anthropic.claude-haiku-4-5-20251001-v1:0\"\n\nmymodel=${ANTHROPIC_SMALL_FAST_MODEL}\nif [[ \"$1\" == \"opus\" ]]; then\n  mymodel=$1\nelif [[ \"$1\" == \"sonnet\" ]]; then\n  mymodel=\"anthropic.claude-sonnet-4-5-20250929-v1:0\"\nfi\n\n~/.claude/local/claude --dangerously-skip-permissions --model $mymodel $@\n</code></pre> <p>Make it executable:</p> <pre><code>chmod +x ~/bin/claude\n</code></pre>"},{"location":"claude-code/#important-git-repository-requirement","title":"Important: Git Repository Requirement","text":"<p>Claude Code must always be initialized inside a git repository. This is a requirement for the tool to function properly.</p>"},{"location":"claude-code/#setting-up-a-git-repository","title":"Setting Up a Git Repository","text":"<p>You have two options:</p>"},{"location":"claude-code/#option-1-create-a-local-repository","title":"Option 1: Create a Local Repository","text":"<pre><code>mkdir my-project\ncd my-project\ngit init\n</code></pre> <p>Then run Claude Code inside this directory:</p> <pre><code>claude .\n</code></pre>"},{"location":"claude-code/#option-2-create-a-repository-on-github","title":"Option 2: Create a Repository on GitHub","text":"<ol> <li>Visit github.com/new to create a new repository</li> <li>Clone it to your local machine:</li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/my-project.git\ncd my-project\n</code></pre> <ol> <li>Run Claude Code:</li> </ol> <pre><code>claude .\n</code></pre>"},{"location":"claude-code/#model-comparison","title":"Model Comparison","text":"<p>Understanding the differences between the three available models helps you choose the right tool for each task:</p> Aspect Haiku Sonnet Opus Speed \u26a1 Fast \u26a1\u26a1 Medium \ud83d\udc0c Slow Cost \ud83d\udcb0 $0.80/MTok \ud83d\udcb0\ud83d\udcb0 $3.00/MTok \ud83d\udcb0\ud83d\udcb0\ud83d\udcb0 $15.00/MTok Performance Excellent Very Good Superior Complex Tasks \u2b50 \u2b50\u2b50\u2b50 Medium \u2b50\u2b50\u2b50\u2b50\u2b50 High Coding Skills \u2b50\u2b50 Medium \u2b50\u2b50\u2b50 Good \u2b50\u2b50\u2b50\u2b50\u2b50 Excellent"},{"location":"claude-code/#usage","title":"Usage","text":""},{"location":"claude-code/#default-haiku-fast","title":"Default (Haiku - Fast)","text":"<p>Run Claude Code with the default fast Haiku model for quick fixes and simple tasks:</p> <pre><code>claude /path/to/project\n</code></pre> <p>Best for: - Quick bug fixes - Simple code generation - Refactoring small sections - Cost-conscious tasks</p>"},{"location":"claude-code/#sonnet-balanced","title":"Sonnet (Balanced)","text":"<p>Run with the balanced Sonnet model for most development work:</p> <pre><code>claude sonnet /path/to/project\n</code></pre> <p>Best for: - Complex feature development - Detailed code analysis - Medium-complexity problems - Good balance of speed and capability</p>"},{"location":"claude-code/#opus-most-capable","title":"Opus (Most Capable)","text":"<p>Run with the most capable Opus model for challenging problems:</p> <pre><code>claude opus /path/to/project\n</code></pre> <p>Best for: - Difficult architectural decisions - Complex problem-solving - Full-project analysis - Maximum capability required</p>"},{"location":"claude-code/#configuration-notes","title":"Configuration Notes","text":"<ul> <li>Bedrock Integration: Uses AWS Bedrock for model inference</li> <li>Context Window: Defaults to 1M context window for Sonnet</li> <li>No Confirmation: Configured to skip permission prompts for streamlined workflow</li> <li>Model Selection: Easy switching between Haiku (fast), Sonnet (balanced), and Opus (capable)</li> </ul>"},{"location":"claude-code/#tips-and-best-practices","title":"Tips and Best Practices","text":"<ul> <li>Use Haiku for quick fixes and simple tasks</li> <li>Use Sonnet for complex development and analysis</li> <li>Use Opus for challenging problems requiring maximum capability</li> <li>Ensure AWS credentials are properly configured before use</li> <li>The wrapper script automatically handles model selection and AWS environment setup</li> </ul>"},{"location":"github/","title":"GitHub","text":"<p>Essential setup and configuration for working with GitHub repositories.</p>"},{"location":"github/#ssh-key-setup","title":"SSH Key Setup","text":"<p>SSH key generation and keychain management are covered in the Shell section. Follow that guide first to:</p> <ol> <li>Generate your SSH key with a passphrase</li> <li>Configure SSH permissions</li> <li>Set up SSH keychain to cache your passphrase</li> </ol> <p>After completing the Shell setup, come back here to push your key to GitHub.</p>"},{"location":"github/#add-ssh-key-to-github","title":"Add SSH Key to GitHub","text":""},{"location":"github/#option-1-quick-setup-with-github-cli-recommended","title":"Option 1: Quick Setup with GitHub CLI (Recommended)","text":"<p>The fastest way to add your SSH key to GitHub is using the GitHub CLI:</p> <ol> <li>Install GitHub CLI</li> </ol> <pre><code># On Ubuntu/WSL\nsudo apt-get update\nsudo apt-get install gh\n\n# On macOS\nbrew install gh\n\n# Or download from https://github.com/cli/cli/releases\n</code></pre> <ol> <li>Authenticate with GitHub</li> </ol> <pre><code>gh auth login\n</code></pre> <p>Follow the prompts: - Select \"GitHub.com\" - Select \"SSH\" for git protocol - Use your existing SSH key - Authorize GitHub CLI to manage SSH keys</p> <ol> <li>Automatic SSH key upload</li> </ol> <p>GitHub CLI will automatically detect your SSH key and upload it to your GitHub account during <code>gh auth login</code>.</p> <ol> <li>Verify setup</li> </ol> <pre><code>gh auth status\n</code></pre> <p>You should see confirmation of your authenticated account.</p>"},{"location":"github/#option-2-manual-github-web-interface","title":"Option 2: Manual GitHub Web Interface","text":"<p>If you prefer the web interface:</p> <ol> <li>Display your public key:</li> </ol> <pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> <ol> <li> <p>Copy the entire output</p> </li> <li> <p>Go to GitHub Settings \u2192 SSH and GPG keys \u2192 New SSH key</p> </li> <li> <p>Paste your public key and give it a descriptive title (e.g., \"My Laptop\")</p> </li> <li> <p>Click \"Add SSH key\"</p> </li> </ol>"},{"location":"github/#test-ssh-connection","title":"Test SSH Connection","text":"<p>Verify your SSH setup works with GitHub:</p> <pre><code>ssh -T git@github.com\n</code></pre> <p>You should see:</p> <pre><code>Hi YOUR_USERNAME! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre>"},{"location":"github/#basic-git-workflow","title":"Basic Git Workflow","text":""},{"location":"github/#clone-a-repository","title":"Clone a Repository","text":"<pre><code>git clone git@github.com:USERNAME/repository.git\ncd repository\n</code></pre>"},{"location":"github/#create-and-switch-branches","title":"Create and Switch Branches","text":"<pre><code>git checkout -b feature/my-feature\n</code></pre>"},{"location":"github/#make-changes-and-commit","title":"Make Changes and Commit","text":"<pre><code>git add .\ngit commit -m \"Describe your changes\"\n</code></pre>"},{"location":"github/#push-to-github","title":"Push to GitHub","text":"<pre><code>git push origin feature/my-feature\n</code></pre>"},{"location":"github/#create-a-pull-request","title":"Create a Pull Request","text":"<p>After pushing, visit your repository on GitHub and create a pull request to merge your branch.</p>"},{"location":"github/#cloning-your-first-repository","title":"Cloning Your First Repository","text":"<p>Your first GitHub repository can be cloned locally:</p> <pre><code>git clone git@github.com:YOUR_USERNAME/your-repo.git\ncd your-repo\n</code></pre> <p>Then you can run Claude Code inside:</p> <pre><code>claude .\n</code></pre>"},{"location":"nvidia/","title":"Nvidia","text":"<p>GPU acceleration and compute setup guide.</p>"},{"location":"nvidia/#overview","title":"Overview","text":"<p>Nvidia GPUs provide hardware acceleration for compute-intensive workloads. This section covers setup, driver configuration, and optimization.</p>"},{"location":"nvidia/#contents","title":"Contents","text":"<ul> <li>Nvidia driver installation</li> <li>CUDA toolkit setup</li> <li>GPU optimization and monitoring</li> </ul> <p>More content coming soon...</p>"},{"location":"python/","title":"Python","text":"<p>Python development setup and package management using modern tools.</p>"},{"location":"python/#overview","title":"Overview","text":"<p>This setup uses two modern package managers: - UV: Fast, reliable Python package manager and project tool - Pixi: Cross-platform package manager compatible with conda</p>"},{"location":"python/#installing-indigo-python-binary-distribution","title":"Installing Indigo (Python Binary Distribution)","text":"<p>For a clean, optimized Python environment, use Indigo - a standalone Python distribution.</p>"},{"location":"python/#download-and-install","title":"Download and Install","text":"<ol> <li>Download the latest Indigo release</li> </ol> <pre><code>curl -L https://github.com/indygreg/python-build-standalone/releases/download/20240713/cpython-3.13.0b4+20240713-x86_64-unknown-linux-gnu.tar.zst -o python.tar.zst\n</code></pre> <ol> <li>Extract to your home directory</li> </ol> <pre><code>mkdir -p ~/.python\ntar -I zstd -xf python.tar.zst -C ~/.python\n</code></pre> <ol> <li>Add to PATH</li> </ol> <p>Add this to your shell configuration (<code>.bashrc</code>, <code>.zshrc</code>):</p> <pre><code>export PATH=\"$HOME/.python/python/install/bin:$PATH\"\n</code></pre> <ol> <li>Verify Installation</li> </ol> <pre><code>python --version\n</code></pre>"},{"location":"python/#uv-package-manager","title":"UV Package Manager","text":"<p>UV is a fast, reliable package manager for Python projects.</p>"},{"location":"python/#installation","title":"Installation","text":"<pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"python/#creating-a-new-project","title":"Creating a New Project","text":"<pre><code>uv init my-project\ncd my-project\n</code></pre>"},{"location":"python/#adding-dependencies","title":"Adding Dependencies","text":"<pre><code>uv add requests\nuv add --dev pytest\n</code></pre>"},{"location":"python/#running-python-scripts","title":"Running Python Scripts","text":"<pre><code>uv run script.py\n</code></pre>"},{"location":"python/#installing-from-pyprojecttoml","title":"Installing from pyproject.toml","text":"<pre><code>uv sync\n</code></pre>"},{"location":"python/#creating-a-virtual-environment","title":"Creating a Virtual Environment","text":"<pre><code>uv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre>"},{"location":"python/#pixi-package-manager","title":"Pixi Package Manager","text":"<p>Pixi is a cross-platform package manager compatible with conda environments, great for data science and scientific computing.</p>"},{"location":"python/#installation_1","title":"Installation","text":"<pre><code>curl -fsSL https://pixi.sh/install.sh | bash\n</code></pre>"},{"location":"python/#creating-a-new-project_1","title":"Creating a New Project","text":"<pre><code>pixi init my-data-project\ncd my-data-project\n</code></pre>"},{"location":"python/#adding-dependencies_1","title":"Adding Dependencies","text":"<pre><code>pixi add numpy pandas\npixi add --pypi requests\n</code></pre>"},{"location":"python/#running-commands","title":"Running Commands","text":"<pre><code>pixi run python script.py\n</code></pre>"},{"location":"python/#creating-environments","title":"Creating Environments","text":"<pre><code>pixi create -e analysis\npixi run -e analysis python analysis.py\n</code></pre>"},{"location":"python/#conda-compatibility","title":"Conda Compatibility","text":"<p>Pixi automatically handles conda channels and environments:</p> <pre><code>pixi add -c conda-forge numpy\n</code></pre>"},{"location":"python/#choosing-between-uv-and-pixi","title":"Choosing Between UV and Pixi","text":"Use Case Tool Standard Python projects UV Data science / Jupyter Pixi Machine learning Pixi Web development UV CLI tools UV Scientific computing Pixi Mixed dependencies (PyPI + conda) Pixi"},{"location":"python/#virtual-environments","title":"Virtual Environments","text":""},{"location":"python/#with-uv","title":"With UV","text":"<pre><code># Create virtual environment\nuv venv\n\n# Activate\nsource .venv/bin/activate\n\n# Deactivate\ndeactivate\n</code></pre>"},{"location":"python/#with-pixi","title":"With Pixi","text":"<pre><code># Create environment\npixi create -e myenv\n\n# Use environment\npixi run -e myenv python script.py\n</code></pre>"},{"location":"python/#best-practices","title":"Best Practices","text":"<ul> <li>Always use virtual environments to isolate project dependencies</li> <li>Use UV for most Python projects - it's faster and simpler</li> <li>Use Pixi for data science - better conda ecosystem support</li> <li>Commit lock files (<code>uv.lock</code> or <code>pixi.lock</code>) to version control</li> <li>Document dependencies in <code>pyproject.toml</code> or <code>pixi.toml</code></li> </ul>"},{"location":"shell/","title":"Shell","text":"<p>Unix shell configuration and environment setup for a productive development environment.</p>"},{"location":"shell/#overview","title":"Overview","text":"<p>This section covers essential shell setup including SSH configuration, terminal tools, and environment variables.</p>"},{"location":"shell/#ssh-key-management","title":"SSH Key Management","text":"<p>Secure shell access is critical for development work. This section covers SSH setup with password-protected keys and keychain integration.</p>"},{"location":"shell/#generating-ssh-keys","title":"Generating SSH Keys","text":"<p>SSH keys should always use a passphrase for security. When generating keys, use a strong password:</p> <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\" -f ~/.ssh/id_ed25519\n</code></pre> <p>Important: When prompted for a passphrase, enter a strong password. This protects your key if it's ever compromised.</p>"},{"location":"shell/#ssh-key-permissions","title":"SSH Key Permissions","text":"<p>Ensure proper permissions on your SSH keys:</p> <pre><code>chmod 700 ~/.ssh\nchmod 600 ~/.ssh/id_ed25519\nchmod 644 ~/.ssh/id_ed25519.pub\n</code></pre>"},{"location":"shell/#ssh-configuration","title":"SSH Configuration","text":"<p>Create or edit <code>~/.ssh/config</code> to simplify SSH connections:</p> <pre><code>Host github.com\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_ed25519\n    AddKeysToAgent yes\n\nHost *\n    ServerAliveInterval 60\n    ServerAliveCountMax 10\n</code></pre> <p>The <code>AddKeysToAgent yes</code> option automatically adds your key to the SSH agent when you connect.</p>"},{"location":"shell/#ssh-keychain","title":"SSH Keychain","text":"<p>Use SSH keychain to securely store your SSH key passphrase in memory, eliminating the need to re-enter it for every SSH command.</p>"},{"location":"shell/#installation","title":"Installation","text":"<p>On Ubuntu/WSL:</p> <pre><code>sudo apt-get update\nsudo apt-get install ssh-askpass ssh-keychain\n</code></pre> <p>On macOS:</p> <pre><code># Usually included by default\n# If not: brew install ssh-askpass\n</code></pre>"},{"location":"shell/#configuration","title":"Configuration","text":"<p>Add to your shell configuration file (<code>.bashrc</code>, <code>.zshrc</code>, or <code>.profile</code>):</p> <pre><code># SSH Keychain - loads SSH key passphrase into memory\neval $(ssh-keychain -q -t 4h ~/.ssh/id_ed25519)\n</code></pre> <p>The <code>-t 4h</code> parameter sets the cache timeout to 4 hours. Adjust as needed.</p>"},{"location":"shell/#how-it-works","title":"How It Works","text":"<ol> <li>On your first SSH/Git command of the session, you'll be prompted for your SSH key passphrase</li> <li>Enter your password - it's stored securely in your system keychain</li> <li>For the next 4 hours, all SSH connections use the cached passphrase</li> <li>After the timeout, you'll be prompted again</li> </ol> <p>This approach provides security (your key is protected with a password) and convenience (you only type it once per session).</p>"},{"location":"shell/#troubleshooting","title":"Troubleshooting","text":"<p>If prompted repeatedly for your passphrase:</p> <pre><code># Check if ssh-agent is running\nps aux | grep ssh-agent\n\n# Manually start ssh-agent\neval $(ssh-agent -s)\n\n# Add key manually\nssh-add ~/.ssh/id_ed25519\n</code></pre>"},{"location":"shell/#shell-profile-setup","title":"Shell Profile Setup","text":""},{"location":"shell/#bash-configuration","title":"Bash Configuration","text":"<p>Edit <code>~/.bashrc</code>:</p> <pre><code># Add SSH Keychain\neval $(ssh-keychain -q -t 4h ~/.ssh/id_ed25519)\n\n# Add useful aliases\nalias ll='ls -lah'\nalias cd..='cd ..'\nalias clear-cache='rm -rf ~/.cache'\n\n# Set default editor\nexport EDITOR=vim\n\n# Add local bin to PATH\nexport PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre>"},{"location":"shell/#zsh-configuration","title":"Zsh Configuration","text":"<p>Edit <code>~/.zshrc</code>:</p> <pre><code># Add SSH Keychain\neval $(ssh-keychain -q -t 4h ~/.ssh/id_ed25519)\n\n# Add useful aliases\nalias ll='ls -lah'\nalias cd..='cd ..'\n\n# Set default editor\nexport EDITOR=vim\n\n# Add local bin to PATH\nexport PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre>"},{"location":"shell/#essential-environment-variables","title":"Essential Environment Variables","text":"<p>Set these in your shell configuration:</p> <pre><code># Editor\nexport EDITOR=vim\n\n# Language\nexport LANG=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\n\n# Path additions\nexport PATH=\"$HOME/.local/bin:$HOME/.cargo/bin:$PATH\"\n\n# Git\nexport GIT_EDITOR=vim\n</code></pre>"},{"location":"shell/#terminal-best-practices","title":"Terminal Best Practices","text":""},{"location":"shell/#keep-ssh-keys-secure","title":"Keep SSH Keys Secure","text":"<ul> <li>Never commit SSH keys to version control</li> <li>Never share your private key</li> <li>Always use strong passphrases</li> <li>Rotate keys periodically</li> <li>Use key files only for automated systems</li> </ul>"},{"location":"shell/#ssh-agent-security","title":"SSH Agent Security","text":"<ul> <li>Let keychain manage your passphrase</li> <li>Don't store unencrypted passphrases</li> <li>Lock your computer when stepping away</li> <li>Expire cached passphrases after reasonable time</li> </ul>"},{"location":"shell/#command-history","title":"Command History","text":"<p>Keep your shell history clean:</p> <pre><code># Increase history size\nexport HISTSIZE=10000\nexport HISTFILESIZE=10000\n\n# Ignore duplicate commands\nexport HISTCONTROL=ignoredups\n\n# Ignore common commands from history\nexport HISTIGNORE=\"ls:cd:pwd:history\"\n</code></pre>"},{"location":"shell/#useful-shell-aliases","title":"Useful Shell Aliases","text":"<p>Add to your shell configuration:</p> <pre><code># Navigation\nalias ..='cd ..'\nalias ...='cd ../..'\nalias ll='ls -lah'\nalias l='ls -la'\n\n# Git\nalias g='git'\nalias gs='git status'\nalias ga='git add'\nalias gc='git commit'\nalias gp='git push'\nalias gl='git log'\n\n# Development\nalias cls='clear'\nalias py='python'\nalias serve='python -m http.server'\n</code></pre>"},{"location":"shell/#secure-development-environment","title":"Secure Development Environment","text":"<p>Your shell environment should be:</p> <ul> <li>Secure: SSH keys protected with passphrases, keychain for convenience</li> <li>Clean: Well-organized bin directories, clear PATH</li> <li>Productive: Useful aliases, proper history management</li> <li>Isolated: Virtual environments for projects, clear separation of concerns</li> </ul>"},{"location":"wsl/","title":"Windows Subsystem for Linux (WSL)","text":"<p>Setup and configuration guide for Windows Subsystem for Linux.</p>"},{"location":"wsl/#overview","title":"Overview","text":"<p>WSL enables running a Linux environment directly on Windows, providing a native Linux development experience without dual-boot or virtualization overhead.</p>"},{"location":"wsl/#contents","title":"Contents","text":"<ul> <li>WSL installation and setup</li> <li>Distribution configuration</li> <li>Development environment configuration</li> </ul> <p>More content coming soon...</p>"}]}